// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  theme = "forest"
  output = "../ERD.svg"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
  investor
  staker
}

model User {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  email           String           @unique
  password        String
  img             String?          @default("https://i.imgur.com/HeIi0wU.png")
  role            Role             @default(user)
  contactNo       String
  address         String?
  wallet          Int              @default(0)
  deposit         Int              @default(0)
  withdraw        Int              @default(0)
  stake           Int              @default(0)
  stakeReward     Int              @default(0)
  stakes          Stake[]
  stakeRewards    StakeReward[]
  deposits        Deposit[]
  withdraws       Withdraw[]
  wallets         Wallet[]
  referredBy      Referral[]       @relation(name: "ReferredTo")
  referredTo      Referral[]       @relation(name: "ReferredBy")
  referralIncomes ReferralIncome[] @relation(name: "ReferredBy")
  referralTo      ReferralIncome[] @relation(name: "ReferredTo")
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@map("users")
}

model Wallet {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  balance     Float    @default(0)
  deposit     Float    @default(0)
  withdraw    Float    @default(0)
  stake       Float    @default(0)
  stakeReward Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User     @relation(fields: [userId], references: [id])
  deposits    Deposit  @relation(fields: [userId], references: [id])
  withdraws   Withdraw @relation(fields: [userId], references: [id])
  stakes      Stake    @relation(fields: [userId], references: [id])
  stakeRewards StakeReward @relation(fields: [userId], references: [id])
  referralIncomes ReferralIncome @relation(fields: [userId], references: [id])

  @@map("wallets")
}

model Deposit {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  amount    Int      @default(200)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User     @relation(fields: [userId], references: [id])
  wallets   Wallet[]

  @@map("deposits")
}

model Withdraw {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User     @relation(fields: [userId], references: [id])
  wallets   Wallet[]

  @@map("withdraws")
}

model Stake {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  amount    Float
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User     @relation(fields: [userId], references: [id])
  wallets   Wallet[]

  @@map("stakes")
}

model StakeReward {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User     @relation(fields: [userId], references: [id])
  wallets   Wallet[]

  @@map("stakeRewards")
}

model Referral {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @db.ObjectId
  referredBy      String   @db.ObjectId
  referralDeposit Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  users           User     @relation(name: "ReferredBy", fields: [userId], references: [id])
  referredByUser  User     @relation(name: "ReferredTo", fields: [referredBy], references: [id])

  @@map("referrals")
}

model ReferralIncome {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  amount     Int      @default(10)
  referredTo String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  referredBy User     @relation(name: "ReferredBy", fields: [referredTo], references: [id])
  user       User     @relation(name: "ReferredTo", fields: [userId], references: [id])
  wallets    Wallet[]

  @@map("referralIncomes")
}
